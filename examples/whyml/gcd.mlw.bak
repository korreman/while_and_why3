module Gcd
    use mach.int.Int
    use ref.Ref

    predicate divisor (x: int) (a: int) =
      x > 0 && a > 0 && mod x a = 0

    predicate is_gcd (x: int) (a: int) (b: int) =
        divisor x a && divisor x b &&
        forall y. divisor y a -> divisor y b -> divisor y x

    val function gcd (a: int) (b: int) : int
        requires { a > 0 /\ b > 0 }
        returns {x -> is_gcd x a b }

    let compute_gcd (a: int) (b: int)
        requires { a > 0 /\ b > 0 }
        returns { x -> x = gcd a b }
      =
        let ref x = a in
        let ref y = b in
        while y <> 0 do
            invariant { x >= 0 /\ y >= 0 }
            invariant { gcd x y = gcd a b }
            variant { y }
            let t = y in
            y <- x % y;
            x <- t;
        done;
        x
end
